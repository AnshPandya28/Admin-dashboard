const PDFDocument = require('pdfkit');
const { createObjectCsvWriter } = require('csv-writer');
const path = require('path');
const fs = require('fs');

// Function to generate a detailed PDF report
exports.generatePDF = (data) => {
    const doc = new PDFDocument();
    const currentDate = new Date().toLocaleDateString();

    // Title and metadata
    doc.fontSize(18).text('Admin Dashboard Report', { align: 'center' }).moveDown();
    doc.fontSize(12).text(`Date: ${currentDate}`);
    doc.text(`Generated by: Admin Dashboard System`).moveDown();

    // Table of data entries with detailed information
    data.forEach((entry, index) => {
        doc.fontSize(14).text(`Entry ${index + 1}`, { underline: true });
        doc.fontSize(12).text(`Name: ${entry.name}`);
        doc.text(`Email: ${entry.email}`);
        doc.text(`Phone: ${entry.phone || 'N/A'}`);
        doc.text(`Role: ${entry.role || 'User'}`);
        doc.text(`Status: ${entry.status || 'Active'}`);
        doc.moveDown();
    });

    // Finalize the PDF and return the document stream
    return doc;
};

// Function to generate a detailed CSV report
exports.generateCSV = async (data) => {
    const timestamp = Date.now();
    const csvPath = path.join(__dirname, `temp_report_${timestamp}.csv`);

    const csvWriter = createObjectCsvWriter({
        path: csvPath,
        header: [
            { id: 'name', title: 'Name' },
            { id: 'email', title: 'Email' },
            { id: 'phone', title: 'Phone' },
            { id: 'role', title: 'Role' },
            { id: 'status', title: 'Status' },
            { id: 'generated_date', title: 'Report Date' }
        ],
    });

    // Prepare data with additional information for each entry
    const reportData = data.map(entry => ({
        name: entry.name,
        email: entry.email,
        phone: entry.phone || 'N/A',
        role: entry.role || 'User',
        status: entry.status || 'Active',
        generated_date: new Date().toLocaleDateString(),
    }));

    // Write data to CSV file and return the file path
    await csvWriter.writeRecords(reportData);
    return csvPath;
};

// Function to clean up temporary CSV files after download
exports.cleanupCSV = (filePath) => {
    fs.unlink(filePath, (err) => {
        if (err) console.error("Error deleting temporary CSV file:", err);
    });
};
